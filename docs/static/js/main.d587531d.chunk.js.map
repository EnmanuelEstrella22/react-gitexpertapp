{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","GifGridItem","title","url","className","src","alt","getGrifs","category","a","encodeURI","fetch","then","res","json","data","gifs","map","id","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","imgs","console","log","setTimeout","GifGrid","img","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"wPAGMA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,SACbP,GAAc,SAACQ,GAAD,OAAWN,GAAX,mBAA0BM,OACxCL,EAAc,OAMd,2BAAOM,KAAK,OAAOC,MAAOR,EAAYS,SAdhB,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MACrCP,EAAcO,QAkBlBX,EAAYc,UAAY,CACtBb,c,OAAec,EAAUC,KAAKC,YAGjBjB,QClBAkB,EATK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,+BAAKA,EAAL,O,uBCNOK,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAChBN,EADgB,iDACgCO,UACpDF,GAFoB,+DAKCG,MAAMR,GAAKS,MAAK,SAACC,GAAD,OAASA,EAAIC,UAL9B,uBAKdC,EALc,EAKdA,KAEFC,EAAOD,EAAKE,KAChB,YAOE,MAAO,CACLC,GAFE,EALJA,GAQEhB,MAHE,EAJJA,MAQEC,IAJE,EAHJgB,OACEC,iBAAoBjB,QAZJ,kBAsBfa,GAtBe,2CAAH,sDCyBNK,EArBM,SAACb,GAAc,IAAD,EACPvB,mBAAS,CACjC8B,KAAM,GACNO,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAkBjC,OAZAC,qBAAU,WACRlB,EAASC,GAAUI,MAAK,SAACc,GACvBC,QAAQC,IAAIF,GACZG,YAAW,WACTL,EAAS,CACPT,KAAMW,EACNJ,SAAS,MAEV,UAEJ,CAACd,IAEGe,GCAMO,EAlBC,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,EACEa,EAAab,GAAjCW,EADkB,EACxBJ,KAAcO,EADU,EACVA,QAEtB,OACE,oCACE,wBAAIlB,UAAU,qCAAqCI,GAClDc,GACC,uBAAGlB,UAAU,oCAAb,eAEF,yBAAKA,UAAU,aACZe,EAAOF,KAAI,SAACc,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAIb,IAAQa,UCWzBE,EAtBM,WAAO,IAAD,EACWhD,mBAAS,CAAC,QADrB,mBAClBiD,EADkB,KACNlD,EADM,KAQzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACGkD,EAAWjB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAASwB,IAAKxB,EAAUA,SAAUA,UCd5C2B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.d587531d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setcategories }) => {\r\n  const [inputValue, setinputValue] = useState(\"\");\r\n\r\n  const handleInputChange = ({ target: { value } }) => {\r\n    setinputValue(value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim()) {\r\n      setcategories((cats) => [inputValue, ...cats]);\r\n      setinputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.prototype = {\r\n  setcategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title} />\r\n      <p> {title} </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","export const getGrifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=rG3xOaKrmcty6JIhaWqE2TLwRfQhbXET`;\r\n\r\n  const { data } = await fetch(url).then((res) => res.json());\r\n\r\n  const gifs = data.map(\r\n    ({\r\n      id,\r\n      title,\r\n      images: {\r\n        downsized_medium: { url },\r\n      },\r\n    }) => {\r\n      return {\r\n        id,\r\n        title,\r\n        url,\r\n      };\r\n    }\r\n  );\r\n  return gifs;\r\n};\r\n","import { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { getGrifs } from \"../helpers/getGifs\";\r\n\r\nconst useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGrifs(category).then((imgs) => {\r\n      console.log(imgs);\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 3000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from \"react\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__bounce\">{category}</h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Loanding...</p>\r\n      )}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setcategories] = useState([\"One\"]);\r\n\r\n  //   const handleAdd = () => {\r\n  //     setcategories([...categories, \"four\"]);\r\n  //     //     setcategories(cats => [...cats, \"four\"]);\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setcategories={setcategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}